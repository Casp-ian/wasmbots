/*
   This file was automatically generated by Beschi v0.2.0
   <https://github.com/sjml/beschi>
   Do not edit directly.
*/

// To use this header file, include it normally wherever you need access
//   to its structures and functions.
// Then in *exactly* one file, #define WASMBOTSMESSAGE_IMPLEMENTATION
//   *before* including it.

#ifndef INCLUDE_WASMBOTSMESSAGE_H
#define INCLUDE_WASMBOTSMESSAGE_H

#include <stdbool.h>
#include <stdint.h>
#include <string.h>

typedef uint8_t WasmBotsMessage_err_t;
#define WASMBOTSMESSAGE_ERR_OK  0
#define WASMBOTSMESSAGE_ERR_EOF 1
#define WASMBOTSMESSAGE_ERR_INVALID_DATA 2
#define WASMBOTSMESSAGE_ERR_ALLOCATION_FAILURE 3

#ifdef __cplusplus
extern "C" {
#endif

///////////////////////////////////////
// standard utility declarations

typedef struct {
    uint8_t* buffer;
    size_t bufferSize;
    size_t position;
} WasmBotsMessage_DataAccess;

bool WasmBotsMessage_IsFinished(const WasmBotsMessage_DataAccess *r);
WasmBotsMessage_err_t WasmBotsMessage__ReadUInt8(WasmBotsMessage_DataAccess *r, uint8_t *ui8);
WasmBotsMessage_err_t WasmBotsMessage__ReadBool(WasmBotsMessage_DataAccess *r, bool *b);
WasmBotsMessage_err_t WasmBotsMessage__ReadInt16(WasmBotsMessage_DataAccess *r, int16_t *i16);
WasmBotsMessage_err_t WasmBotsMessage__ReadUInt16(WasmBotsMessage_DataAccess *r, uint16_t *ui16);
WasmBotsMessage_err_t WasmBotsMessage__ReadInt32(WasmBotsMessage_DataAccess *r, int32_t *i32);
WasmBotsMessage_err_t WasmBotsMessage__ReadUInt32(WasmBotsMessage_DataAccess *r, uint32_t *ui32);
WasmBotsMessage_err_t WasmBotsMessage__ReadInt64(WasmBotsMessage_DataAccess *r, int64_t *i64);
WasmBotsMessage_err_t WasmBotsMessage__ReadUInt64(WasmBotsMessage_DataAccess *r, uint64_t *ui32);
WasmBotsMessage_err_t WasmBotsMessage__ReadFloat(WasmBotsMessage_DataAccess *r, float *f);
WasmBotsMessage_err_t WasmBotsMessage__ReadDouble(WasmBotsMessage_DataAccess *r, double *d);
WasmBotsMessage_err_t WasmBotsMessage__ReadString(WasmBotsMessage_DataAccess *r, char **s, uint8_t *len);

WasmBotsMessage_err_t WasmBotsMessage__WriteUInt8(WasmBotsMessage_DataAccess *w, const uint8_t ui8);
WasmBotsMessage_err_t WasmBotsMessage__WriteBool(WasmBotsMessage_DataAccess *w, const bool b);
WasmBotsMessage_err_t WasmBotsMessage__WriteInt16(WasmBotsMessage_DataAccess *w, const int16_t i16);
WasmBotsMessage_err_t WasmBotsMessage__WriteUInt16(WasmBotsMessage_DataAccess *w, const uint16_t ui16);
WasmBotsMessage_err_t WasmBotsMessage__WriteInt32(WasmBotsMessage_DataAccess *w, const int32_t i32);
WasmBotsMessage_err_t WasmBotsMessage__WriteUInt32(WasmBotsMessage_DataAccess *w, const uint32_t ui32);
WasmBotsMessage_err_t WasmBotsMessage__WriteInt64(WasmBotsMessage_DataAccess *w, const int64_t i64);
WasmBotsMessage_err_t WasmBotsMessage__WriteUInt64(WasmBotsMessage_DataAccess *w, const uint64_t ui32);
WasmBotsMessage_err_t WasmBotsMessage__WriteFloat(WasmBotsMessage_DataAccess *w, const float f);
WasmBotsMessage_err_t WasmBotsMessage__WriteDouble(WasmBotsMessage_DataAccess *w, const double d);
WasmBotsMessage_err_t WasmBotsMessage__WriteString(WasmBotsMessage_DataAccess *w, char* const *s, const uint8_t len);

// end of standard utility declarations
///////////////////////////////////////


///////////////////////////////////////
// struct/message declarations

typedef enum {
    WasmBotsMessage_MessageType___NullMessage = 0,
    WasmBotsMessage_MessageType__Error = 1,
    WasmBotsMessage_MessageType_InitialParameters = 2,
    WasmBotsMessage_MessageType_PresentCircumstances = 3,
    WasmBotsMessage_MessageType_Wait = 4,
    WasmBotsMessage_MessageType_Resign = 5,
    WasmBotsMessage_MessageType_MoveTo = 6,
    WasmBotsMessage_MessageType_Open = 7,
    WasmBotsMessage_MessageType_Close = 8
} WasmBotsMessage_MessageType;

WasmBotsMessage_MessageType WasmBotsMessage_GetMessageType(const void* m);
WasmBotsMessage_err_t WasmBotsMessage_GetSizeInBytes(const void* m, size_t* len);
WasmBotsMessage_err_t WasmBotsMessage_WriteBytes(WasmBotsMessage_DataAccess* w, const void* m, bool tag);
WasmBotsMessage_err_t WasmBotsMessage_ProcessRawBytes(WasmBotsMessage_DataAccess* r, void*** msgListOut, size_t* len);
WasmBotsMessage_err_t WasmBotsMessage_Destroy(void* m);
WasmBotsMessage_err_t WasmBotsMessage_DestroyMessageList(void** msgList, size_t len);

typedef struct {
    WasmBotsMessage_MessageType _mt;
    uint8_t description_len;
    char* description;
} WasmBotsMessage__Error;
extern const WasmBotsMessage__Error WasmBotsMessage__Error_default;

WasmBotsMessage_err_t WasmBotsMessage__Error_WriteBytes(WasmBotsMessage_DataAccess* w, const WasmBotsMessage__Error* src, bool tag);
WasmBotsMessage_err_t WasmBotsMessage__Error_FromBytes(WasmBotsMessage_DataAccess* r, WasmBotsMessage__Error* dst);
WasmBotsMessage_err_t WasmBotsMessage__Error_GetSizeInBytes(const WasmBotsMessage__Error* m, size_t* size);
WasmBotsMessage__Error* WasmBotsMessage__Error_Create(void);
void WasmBotsMessage__Error_Destroy(WasmBotsMessage__Error *m);


typedef struct {
    WasmBotsMessage_MessageType _mt;
    uint16_t paramsVersion;
    uint16_t engineVersionMajor;
    uint16_t engineVersionMinor;
    uint16_t engineVersionPatch;
} WasmBotsMessage_InitialParameters;
extern const WasmBotsMessage_InitialParameters WasmBotsMessage_InitialParameters_default;

WasmBotsMessage_err_t WasmBotsMessage_InitialParameters_WriteBytes(WasmBotsMessage_DataAccess* w, const WasmBotsMessage_InitialParameters* src, bool tag);
WasmBotsMessage_err_t WasmBotsMessage_InitialParameters_FromBytes(WasmBotsMessage_DataAccess* r, WasmBotsMessage_InitialParameters* dst);
WasmBotsMessage_err_t WasmBotsMessage_InitialParameters_GetSizeInBytes(const WasmBotsMessage_InitialParameters* m, size_t* size);
WasmBotsMessage_InitialParameters* WasmBotsMessage_InitialParameters_Create(void);
void WasmBotsMessage_InitialParameters_Destroy(WasmBotsMessage_InitialParameters *m);


typedef struct {
    WasmBotsMessage_MessageType _mt;
    uint32_t lastTickDuration;
    bool lastMoveSucceeded;
    bool lastMoveValid;
    uint16_t currentHitPoints;
    uint8_t currentStatus;
    uint16_t surroundings_len;
    uint16_t* surroundings;
    uint8_t surroundingsRadius;
} WasmBotsMessage_PresentCircumstances;
extern const WasmBotsMessage_PresentCircumstances WasmBotsMessage_PresentCircumstances_default;

WasmBotsMessage_err_t WasmBotsMessage_PresentCircumstances_WriteBytes(WasmBotsMessage_DataAccess* w, const WasmBotsMessage_PresentCircumstances* src, bool tag);
WasmBotsMessage_err_t WasmBotsMessage_PresentCircumstances_FromBytes(WasmBotsMessage_DataAccess* r, WasmBotsMessage_PresentCircumstances* dst);
WasmBotsMessage_err_t WasmBotsMessage_PresentCircumstances_GetSizeInBytes(const WasmBotsMessage_PresentCircumstances* m, size_t* size);
WasmBotsMessage_PresentCircumstances* WasmBotsMessage_PresentCircumstances_Create(void);
void WasmBotsMessage_PresentCircumstances_Destroy(WasmBotsMessage_PresentCircumstances *m);


typedef struct {
    WasmBotsMessage_MessageType _mt;
} WasmBotsMessage_Wait;
extern const WasmBotsMessage_Wait WasmBotsMessage_Wait_default;

WasmBotsMessage_err_t WasmBotsMessage_Wait_WriteBytes(WasmBotsMessage_DataAccess* w, const WasmBotsMessage_Wait* src, bool tag);
WasmBotsMessage_err_t WasmBotsMessage_Wait_FromBytes(WasmBotsMessage_DataAccess* r, WasmBotsMessage_Wait* dst);
WasmBotsMessage_err_t WasmBotsMessage_Wait_GetSizeInBytes(const WasmBotsMessage_Wait* m, size_t* size);
WasmBotsMessage_Wait* WasmBotsMessage_Wait_Create(void);
void WasmBotsMessage_Wait_Destroy(WasmBotsMessage_Wait *m);


typedef struct {
    WasmBotsMessage_MessageType _mt;
} WasmBotsMessage_Resign;
extern const WasmBotsMessage_Resign WasmBotsMessage_Resign_default;

WasmBotsMessage_err_t WasmBotsMessage_Resign_WriteBytes(WasmBotsMessage_DataAccess* w, const WasmBotsMessage_Resign* src, bool tag);
WasmBotsMessage_err_t WasmBotsMessage_Resign_FromBytes(WasmBotsMessage_DataAccess* r, WasmBotsMessage_Resign* dst);
WasmBotsMessage_err_t WasmBotsMessage_Resign_GetSizeInBytes(const WasmBotsMessage_Resign* m, size_t* size);
WasmBotsMessage_Resign* WasmBotsMessage_Resign_Create(void);
void WasmBotsMessage_Resign_Destroy(WasmBotsMessage_Resign *m);


typedef struct {
    WasmBotsMessage_MessageType _mt;
    uint8_t direction;
    uint8_t distance;
} WasmBotsMessage_MoveTo;
extern const WasmBotsMessage_MoveTo WasmBotsMessage_MoveTo_default;

WasmBotsMessage_err_t WasmBotsMessage_MoveTo_WriteBytes(WasmBotsMessage_DataAccess* w, const WasmBotsMessage_MoveTo* src, bool tag);
WasmBotsMessage_err_t WasmBotsMessage_MoveTo_FromBytes(WasmBotsMessage_DataAccess* r, WasmBotsMessage_MoveTo* dst);
WasmBotsMessage_err_t WasmBotsMessage_MoveTo_GetSizeInBytes(const WasmBotsMessage_MoveTo* m, size_t* size);
WasmBotsMessage_MoveTo* WasmBotsMessage_MoveTo_Create(void);
void WasmBotsMessage_MoveTo_Destroy(WasmBotsMessage_MoveTo *m);


typedef struct {
    WasmBotsMessage_MessageType _mt;
    int16_t targetX;
    int16_t targetY;
} WasmBotsMessage_Open;
extern const WasmBotsMessage_Open WasmBotsMessage_Open_default;

WasmBotsMessage_err_t WasmBotsMessage_Open_WriteBytes(WasmBotsMessage_DataAccess* w, const WasmBotsMessage_Open* src, bool tag);
WasmBotsMessage_err_t WasmBotsMessage_Open_FromBytes(WasmBotsMessage_DataAccess* r, WasmBotsMessage_Open* dst);
WasmBotsMessage_err_t WasmBotsMessage_Open_GetSizeInBytes(const WasmBotsMessage_Open* m, size_t* size);
WasmBotsMessage_Open* WasmBotsMessage_Open_Create(void);
void WasmBotsMessage_Open_Destroy(WasmBotsMessage_Open *m);


typedef struct {
    WasmBotsMessage_MessageType _mt;
    int16_t targetX;
    int16_t targetY;
} WasmBotsMessage_Close;
extern const WasmBotsMessage_Close WasmBotsMessage_Close_default;

WasmBotsMessage_err_t WasmBotsMessage_Close_WriteBytes(WasmBotsMessage_DataAccess* w, const WasmBotsMessage_Close* src, bool tag);
WasmBotsMessage_err_t WasmBotsMessage_Close_FromBytes(WasmBotsMessage_DataAccess* r, WasmBotsMessage_Close* dst);
WasmBotsMessage_err_t WasmBotsMessage_Close_GetSizeInBytes(const WasmBotsMessage_Close* m, size_t* size);
WasmBotsMessage_Close* WasmBotsMessage_Close_Create(void);
void WasmBotsMessage_Close_Destroy(WasmBotsMessage_Close *m);


// end of struct/message declarations
///////////////////////////////////////


#ifdef WASMBOTSMESSAGE_IMPLEMENTATION

//////////////////////////////////////////////////////////////////////////////
//
//   IMPLEMENTATION
//


#ifndef WASMBOTSMESSAGE_MALLOC
    #define WASMBOTSMESSAGE_MALLOC(size)             malloc(size)
    #define WASMBOTSMESSAGE_REALLOC(ptr, newSize)    realloc(ptr, newSize)
    #define WASMBOTSMESSAGE_FREE(ptr)                free(ptr)
#endif


///////////////////////////////////////
// standard utility definitions

bool WasmBotsMessage_IsFinished(const WasmBotsMessage_DataAccess *r) {
    return r->position >= r->bufferSize;
}

WasmBotsMessage_err_t WasmBotsMessage__ReadUInt8(WasmBotsMessage_DataAccess *r, uint8_t *ui8) {
    if (r->bufferSize < r->position + 1) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    memcpy(ui8, r->buffer + r->position, 1);
    r->position += 1;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__ReadBool(WasmBotsMessage_DataAccess *r, bool *b) {
    uint8_t byteVal;
    WasmBotsMessage_err_t err = WasmBotsMessage__ReadUInt8(r, &byteVal);
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    *b = byteVal > 0;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__ReadInt16(WasmBotsMessage_DataAccess *r, int16_t *i16) {
    if (r->bufferSize < r->position + 2) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    memcpy(i16, r->buffer + r->position, 2);
    r->position += 2;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__ReadUInt16(WasmBotsMessage_DataAccess *r, uint16_t *ui16) {
    if (r->bufferSize < r->position + 2) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    memcpy(ui16, r->buffer + r->position, 2);
    r->position += 2;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__ReadInt32(WasmBotsMessage_DataAccess *r, int32_t *i32) {
    if (r->bufferSize < r->position + 4) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    memcpy(i32, r->buffer + r->position, 4);
    r->position += 4;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__ReadUInt32(WasmBotsMessage_DataAccess *r, uint32_t *ui32) {
    if (r->bufferSize < r->position + 4) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    memcpy(ui32, r->buffer + r->position, 4);
    r->position += 4;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__ReadInt64(WasmBotsMessage_DataAccess *r, int64_t *i64) {
    if (r->bufferSize < r->position + 8) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    memcpy(i64, r->buffer + r->position, 8);
    r->position += 8;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__ReadUInt64(WasmBotsMessage_DataAccess *r, uint64_t *ui64) {
    if (r->bufferSize < r->position + 8) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    memcpy(ui64, r->buffer + r->position, 8);
    r->position += 8;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__ReadFloat(WasmBotsMessage_DataAccess *r, float *f) {
    if (r->bufferSize < r->position + 4) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    memcpy(f, r->buffer + r->position, 4);
    r->position += 4;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__ReadDouble(WasmBotsMessage_DataAccess *r, double *d) {
    if (r->bufferSize < r->position + 8) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    memcpy(d, r->buffer + r->position, 8);
    r->position += 8;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__ReadString(WasmBotsMessage_DataAccess *r, char **s, uint8_t *len) {
    WasmBotsMessage_err_t err;
    err = WasmBotsMessage__ReadUInt8(r, len);
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    if (r->bufferSize < r->position + *len) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    *s = (char*)calloc(1, (size_t)(*len + 1));
    if (*s == NULL) { return WASMBOTSMESSAGE_ERR_ALLOCATION_FAILURE; }
    memcpy(*s, r->buffer + r->position, *len);
    r->position += *len;
    return WASMBOTSMESSAGE_ERR_OK;
}



WasmBotsMessage_err_t WasmBotsMessage__WriteUInt8(WasmBotsMessage_DataAccess *w, const uint8_t ui8) {
    if (w->bufferSize < w->position + 1) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    w->buffer[w->position] = ui8;
    w->position += 1;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__WriteBool(WasmBotsMessage_DataAccess *w, const bool b) {
    WasmBotsMessage_err_t err;
    err = WasmBotsMessage__WriteUInt8(w, (uint8_t)(b ? 1 : 0));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__WriteInt16(WasmBotsMessage_DataAccess *w, const int16_t i16) {
    if (w->bufferSize < w->position + 2) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    memcpy(w->buffer + w->position, &i16, 2);
    w->position += 2;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__WriteUInt16(WasmBotsMessage_DataAccess *w, const uint16_t ui16) {
    if (w->bufferSize < w->position + 2) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    memcpy(w->buffer + w->position, &ui16, 2);
    w->position += 2;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__WriteInt32(WasmBotsMessage_DataAccess *w, const int32_t i32) {
    if (w->bufferSize < w->position + 4) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    memcpy(w->buffer + w->position, &i32, 4);
    w->position += 4;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__WriteUInt32(WasmBotsMessage_DataAccess *w, const uint32_t ui32) {
    if (w->bufferSize < w->position + 4) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    memcpy(w->buffer + w->position, &ui32, 4);
    w->position += 4;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__WriteInt64(WasmBotsMessage_DataAccess *w, const int64_t i64) {
    if (w->bufferSize < w->position + 8) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    memcpy(w->buffer + w->position, &i64, 8);
    w->position += 8;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__WriteUInt64(WasmBotsMessage_DataAccess *w, const uint64_t ui64) {
    if (w->bufferSize < w->position + 8) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    memcpy(w->buffer + w->position, &ui64, 8);
    w->position += 8;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__WriteFloat(WasmBotsMessage_DataAccess *w, const float f) {
    if (w->bufferSize < w->position + 4) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    memcpy(w->buffer + w->position, &f, 4);
    w->position += 4;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__WriteDouble(WasmBotsMessage_DataAccess *w, const double d) {
    if (w->bufferSize < w->position + 8) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    memcpy(w->buffer + w->position, &d, 8);
    w->position += 8;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__WriteString(WasmBotsMessage_DataAccess *w, char* const *s, const uint8_t len) {
    WasmBotsMessage_err_t err;
    err = WasmBotsMessage__WriteUInt8(w, len);
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    if (w->bufferSize < w->position + len) {
        return WASMBOTSMESSAGE_ERR_EOF;
    }
    memcpy(w->buffer + w->position, *s, len);
    w->position += len;
    return WASMBOTSMESSAGE_ERR_OK;
}

// end of standard utility definitions
///////////////////////////////////////


///////////////////////////////////////
// struct/message definitions

WasmBotsMessage_MessageType WasmBotsMessage_GetMessageType(const void* m) {
    const uint8_t* buffer = (const uint8_t*)m;
    uint8_t msgType = buffer[0];
    if (msgType > 8) {
        return WasmBotsMessage_MessageType___NullMessage;
    }
    return (WasmBotsMessage_MessageType)msgType;
}

WasmBotsMessage_err_t WasmBotsMessage_GetSizeInBytes(const void* m, size_t* len) {
    WasmBotsMessage_MessageType msgType = WasmBotsMessage_GetMessageType(m);
    switch (msgType) {
    case WasmBotsMessage_MessageType___NullMessage:
        return WASMBOTSMESSAGE_ERR_INVALID_DATA;
        break;
    case WasmBotsMessage_MessageType__Error:
        return WasmBotsMessage__Error_GetSizeInBytes((const WasmBotsMessage__Error*)m, len);
    case WasmBotsMessage_MessageType_InitialParameters:
        return WasmBotsMessage_InitialParameters_GetSizeInBytes((const WasmBotsMessage_InitialParameters*)m, len);
    case WasmBotsMessage_MessageType_PresentCircumstances:
        return WasmBotsMessage_PresentCircumstances_GetSizeInBytes((const WasmBotsMessage_PresentCircumstances*)m, len);
    case WasmBotsMessage_MessageType_Wait:
        return WasmBotsMessage_Wait_GetSizeInBytes((const WasmBotsMessage_Wait*)m, len);
    case WasmBotsMessage_MessageType_Resign:
        return WasmBotsMessage_Resign_GetSizeInBytes((const WasmBotsMessage_Resign*)m, len);
    case WasmBotsMessage_MessageType_MoveTo:
        return WasmBotsMessage_MoveTo_GetSizeInBytes((const WasmBotsMessage_MoveTo*)m, len);
    case WasmBotsMessage_MessageType_Open:
        return WasmBotsMessage_Open_GetSizeInBytes((const WasmBotsMessage_Open*)m, len);
    case WasmBotsMessage_MessageType_Close:
        return WasmBotsMessage_Close_GetSizeInBytes((const WasmBotsMessage_Close*)m, len);
    }
    return WASMBOTSMESSAGE_ERR_INVALID_DATA;
}

WasmBotsMessage_err_t WasmBotsMessage_WriteBytes(WasmBotsMessage_DataAccess* w, const void* m, bool tag) {
    WasmBotsMessage_MessageType msgType = WasmBotsMessage_GetMessageType(m);
    switch (msgType) {
    case WasmBotsMessage_MessageType___NullMessage:
        return WASMBOTSMESSAGE_ERR_INVALID_DATA;
    case WasmBotsMessage_MessageType__Error:
        return WasmBotsMessage__Error_WriteBytes(w, (const WasmBotsMessage__Error*)m, tag);
    case WasmBotsMessage_MessageType_InitialParameters:
        return WasmBotsMessage_InitialParameters_WriteBytes(w, (const WasmBotsMessage_InitialParameters*)m, tag);
    case WasmBotsMessage_MessageType_PresentCircumstances:
        return WasmBotsMessage_PresentCircumstances_WriteBytes(w, (const WasmBotsMessage_PresentCircumstances*)m, tag);
    case WasmBotsMessage_MessageType_Wait:
        return WasmBotsMessage_Wait_WriteBytes(w, (const WasmBotsMessage_Wait*)m, tag);
    case WasmBotsMessage_MessageType_Resign:
        return WasmBotsMessage_Resign_WriteBytes(w, (const WasmBotsMessage_Resign*)m, tag);
    case WasmBotsMessage_MessageType_MoveTo:
        return WasmBotsMessage_MoveTo_WriteBytes(w, (const WasmBotsMessage_MoveTo*)m, tag);
    case WasmBotsMessage_MessageType_Open:
        return WasmBotsMessage_Open_WriteBytes(w, (const WasmBotsMessage_Open*)m, tag);
    case WasmBotsMessage_MessageType_Close:
        return WasmBotsMessage_Close_WriteBytes(w, (const WasmBotsMessage_Close*)m, tag);
    }
    return WASMBOTSMESSAGE_ERR_INVALID_DATA;
}

WasmBotsMessage_err_t WasmBotsMessage_Destroy(void* m) {
    WasmBotsMessage_MessageType msgType = WasmBotsMessage_GetMessageType(m);
    switch (msgType) {
    case WasmBotsMessage_MessageType___NullMessage:
        return WASMBOTSMESSAGE_ERR_INVALID_DATA;
    case WasmBotsMessage_MessageType__Error:
        WasmBotsMessage__Error_Destroy((WasmBotsMessage__Error*)m);
        return WASMBOTSMESSAGE_ERR_OK;
    case WasmBotsMessage_MessageType_InitialParameters:
        WasmBotsMessage_InitialParameters_Destroy((WasmBotsMessage_InitialParameters*)m);
        return WASMBOTSMESSAGE_ERR_OK;
    case WasmBotsMessage_MessageType_PresentCircumstances:
        WasmBotsMessage_PresentCircumstances_Destroy((WasmBotsMessage_PresentCircumstances*)m);
        return WASMBOTSMESSAGE_ERR_OK;
    case WasmBotsMessage_MessageType_Wait:
        WasmBotsMessage_Wait_Destroy((WasmBotsMessage_Wait*)m);
        return WASMBOTSMESSAGE_ERR_OK;
    case WasmBotsMessage_MessageType_Resign:
        WasmBotsMessage_Resign_Destroy((WasmBotsMessage_Resign*)m);
        return WASMBOTSMESSAGE_ERR_OK;
    case WasmBotsMessage_MessageType_MoveTo:
        WasmBotsMessage_MoveTo_Destroy((WasmBotsMessage_MoveTo*)m);
        return WASMBOTSMESSAGE_ERR_OK;
    case WasmBotsMessage_MessageType_Open:
        WasmBotsMessage_Open_Destroy((WasmBotsMessage_Open*)m);
        return WASMBOTSMESSAGE_ERR_OK;
    case WasmBotsMessage_MessageType_Close:
        WasmBotsMessage_Close_Destroy((WasmBotsMessage_Close*)m);
        return WASMBOTSMESSAGE_ERR_OK;
    }
    return WASMBOTSMESSAGE_ERR_INVALID_DATA;
}

WasmBotsMessage_err_t WasmBotsMessage_ProcessRawBytes(WasmBotsMessage_DataAccess* r, void*** msgListDst, size_t* len) {
    WasmBotsMessage_err_t err = WASMBOTSMESSAGE_ERR_OK;
    size_t currCapacity = 8;
    *msgListDst = (void**)WASMBOTSMESSAGE_MALLOC(sizeof(void*) * currCapacity);
    if (*msgListDst == NULL) { return WASMBOTSMESSAGE_ERR_ALLOCATION_FAILURE; }
    *len = 0;
    while (!WasmBotsMessage_IsFinished(r)) {
        while (*len >= currCapacity) {
            currCapacity *= 2;
            *msgListDst = (void**)WASMBOTSMESSAGE_REALLOC(*msgListDst, (sizeof(void*) * currCapacity));
            if (*msgListDst == NULL) { return WASMBOTSMESSAGE_ERR_ALLOCATION_FAILURE; }
        }
        uint8_t msgType;
        WasmBotsMessage__ReadUInt8(r, &msgType);
        if (err != WASMBOTSMESSAGE_ERR_OK) {
            return err;
        }

        void* out;
        switch (msgType) {
        case WasmBotsMessage_MessageType___NullMessage:
            return WASMBOTSMESSAGE_ERR_OK;
        case WasmBotsMessage_MessageType__Error:
            out = WASMBOTSMESSAGE_MALLOC(sizeof(WasmBotsMessage__Error));
            if (out == NULL) { return WASMBOTSMESSAGE_ERR_ALLOCATION_FAILURE; }
            err = WasmBotsMessage__Error_FromBytes(r, (WasmBotsMessage__Error*)out);
            (*msgListDst)[*len] = out;
            *len += 1;
            if (err != WASMBOTSMESSAGE_ERR_OK) {
                return err;
            }
            break;
        case WasmBotsMessage_MessageType_InitialParameters:
            out = WASMBOTSMESSAGE_MALLOC(sizeof(WasmBotsMessage_InitialParameters));
            if (out == NULL) { return WASMBOTSMESSAGE_ERR_ALLOCATION_FAILURE; }
            err = WasmBotsMessage_InitialParameters_FromBytes(r, (WasmBotsMessage_InitialParameters*)out);
            (*msgListDst)[*len] = out;
            *len += 1;
            if (err != WASMBOTSMESSAGE_ERR_OK) {
                return err;
            }
            break;
        case WasmBotsMessage_MessageType_PresentCircumstances:
            out = WASMBOTSMESSAGE_MALLOC(sizeof(WasmBotsMessage_PresentCircumstances));
            if (out == NULL) { return WASMBOTSMESSAGE_ERR_ALLOCATION_FAILURE; }
            err = WasmBotsMessage_PresentCircumstances_FromBytes(r, (WasmBotsMessage_PresentCircumstances*)out);
            (*msgListDst)[*len] = out;
            *len += 1;
            if (err != WASMBOTSMESSAGE_ERR_OK) {
                return err;
            }
            break;
        case WasmBotsMessage_MessageType_Wait:
            out = WASMBOTSMESSAGE_MALLOC(sizeof(WasmBotsMessage_Wait));
            if (out == NULL) { return WASMBOTSMESSAGE_ERR_ALLOCATION_FAILURE; }
            err = WasmBotsMessage_Wait_FromBytes(r, (WasmBotsMessage_Wait*)out);
            (*msgListDst)[*len] = out;
            *len += 1;
            if (err != WASMBOTSMESSAGE_ERR_OK) {
                return err;
            }
            break;
        case WasmBotsMessage_MessageType_Resign:
            out = WASMBOTSMESSAGE_MALLOC(sizeof(WasmBotsMessage_Resign));
            if (out == NULL) { return WASMBOTSMESSAGE_ERR_ALLOCATION_FAILURE; }
            err = WasmBotsMessage_Resign_FromBytes(r, (WasmBotsMessage_Resign*)out);
            (*msgListDst)[*len] = out;
            *len += 1;
            if (err != WASMBOTSMESSAGE_ERR_OK) {
                return err;
            }
            break;
        case WasmBotsMessage_MessageType_MoveTo:
            out = WASMBOTSMESSAGE_MALLOC(sizeof(WasmBotsMessage_MoveTo));
            if (out == NULL) { return WASMBOTSMESSAGE_ERR_ALLOCATION_FAILURE; }
            err = WasmBotsMessage_MoveTo_FromBytes(r, (WasmBotsMessage_MoveTo*)out);
            (*msgListDst)[*len] = out;
            *len += 1;
            if (err != WASMBOTSMESSAGE_ERR_OK) {
                return err;
            }
            break;
        case WasmBotsMessage_MessageType_Open:
            out = WASMBOTSMESSAGE_MALLOC(sizeof(WasmBotsMessage_Open));
            if (out == NULL) { return WASMBOTSMESSAGE_ERR_ALLOCATION_FAILURE; }
            err = WasmBotsMessage_Open_FromBytes(r, (WasmBotsMessage_Open*)out);
            (*msgListDst)[*len] = out;
            *len += 1;
            if (err != WASMBOTSMESSAGE_ERR_OK) {
                return err;
            }
            break;
        case WasmBotsMessage_MessageType_Close:
            out = WASMBOTSMESSAGE_MALLOC(sizeof(WasmBotsMessage_Close));
            if (out == NULL) { return WASMBOTSMESSAGE_ERR_ALLOCATION_FAILURE; }
            err = WasmBotsMessage_Close_FromBytes(r, (WasmBotsMessage_Close*)out);
            (*msgListDst)[*len] = out;
            *len += 1;
            if (err != WASMBOTSMESSAGE_ERR_OK) {
                return err;
            }
            break;
        default:
            return WASMBOTSMESSAGE_ERR_INVALID_DATA;
            break;
        }
    }
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage_DestroyMessageList(void** msgList, size_t len) {
    for (size_t i = 0; i < len; i++) {
        WasmBotsMessage_MessageType msgType = WasmBotsMessage_GetMessageType(msgList[i]);
        switch (msgType) {
        case WasmBotsMessage_MessageType__Error:
            WasmBotsMessage__Error_Destroy((WasmBotsMessage__Error*)msgList[i]);
            break;
        case WasmBotsMessage_MessageType_InitialParameters:
            WasmBotsMessage_InitialParameters_Destroy((WasmBotsMessage_InitialParameters*)msgList[i]);
            break;
        case WasmBotsMessage_MessageType_PresentCircumstances:
            WasmBotsMessage_PresentCircumstances_Destroy((WasmBotsMessage_PresentCircumstances*)msgList[i]);
            break;
        case WasmBotsMessage_MessageType_Wait:
            WasmBotsMessage_Wait_Destroy((WasmBotsMessage_Wait*)msgList[i]);
            break;
        case WasmBotsMessage_MessageType_Resign:
            WasmBotsMessage_Resign_Destroy((WasmBotsMessage_Resign*)msgList[i]);
            break;
        case WasmBotsMessage_MessageType_MoveTo:
            WasmBotsMessage_MoveTo_Destroy((WasmBotsMessage_MoveTo*)msgList[i]);
            break;
        case WasmBotsMessage_MessageType_Open:
            WasmBotsMessage_Open_Destroy((WasmBotsMessage_Open*)msgList[i]);
            break;
        case WasmBotsMessage_MessageType_Close:
            WasmBotsMessage_Close_Destroy((WasmBotsMessage_Close*)msgList[i]);
            break;
        case WasmBotsMessage_MessageType___NullMessage:
            return WASMBOTSMESSAGE_ERR_INVALID_DATA;
        }
    }
    WASMBOTSMESSAGE_FREE(msgList);
    return WASMBOTSMESSAGE_ERR_OK;
}

const WasmBotsMessage__Error WasmBotsMessage__Error_default = {
    ._mt = WasmBotsMessage_MessageType__Error,
    .description_len = 0,
    .description = (char*)"",
};

WasmBotsMessage_err_t WasmBotsMessage__Error_GetSizeInBytes(const WasmBotsMessage__Error* m, size_t* size) {
    *size = 0;
    *size += m->description_len;
    *size += 1;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage__Error* WasmBotsMessage__Error_Create(void) {
    WasmBotsMessage__Error* out = (WasmBotsMessage__Error*)WASMBOTSMESSAGE_MALLOC(sizeof(WasmBotsMessage__Error));
    if (out == NULL) { return NULL; }
    out->_mt = WasmBotsMessage_MessageType__Error;
    out->description = WasmBotsMessage__Error_default.description;
    return out;
}

void WasmBotsMessage__Error_Destroy(WasmBotsMessage__Error *m) {
    WASMBOTSMESSAGE_FREE(m->description);
    WASMBOTSMESSAGE_FREE(m);
}

WasmBotsMessage_err_t WasmBotsMessage__Error_FromBytes(WasmBotsMessage_DataAccess* r, WasmBotsMessage__Error* dst) {
    dst->_mt = WasmBotsMessage_MessageType__Error;
    WasmBotsMessage_err_t err;
    err = WasmBotsMessage__ReadString(r, &(dst->description), &(dst->description_len));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage__Error_WriteBytes(WasmBotsMessage_DataAccess* w, const WasmBotsMessage__Error* src, bool tag) {
    WasmBotsMessage_err_t err;
    if (tag) {
        err = WasmBotsMessage__WriteUInt8(w, (const uint8_t)(src->_mt));
        if (err != WASMBOTSMESSAGE_ERR_OK) {
            return err;
        }
    }
    err = WasmBotsMessage__WriteString(w, &(src->description), (src->description_len));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    return WASMBOTSMESSAGE_ERR_OK;
}

const WasmBotsMessage_InitialParameters WasmBotsMessage_InitialParameters_default = {
    ._mt = WasmBotsMessage_MessageType_InitialParameters,
    .paramsVersion = 0,
    .engineVersionMajor = 0,
    .engineVersionMinor = 0,
    .engineVersionPatch = 0,
};

WasmBotsMessage_err_t WasmBotsMessage_InitialParameters_GetSizeInBytes(const WasmBotsMessage_InitialParameters* m, size_t* size) {
    *size = 8;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_InitialParameters* WasmBotsMessage_InitialParameters_Create(void) {
    WasmBotsMessage_InitialParameters* out = (WasmBotsMessage_InitialParameters*)WASMBOTSMESSAGE_MALLOC(sizeof(WasmBotsMessage_InitialParameters));
    if (out == NULL) { return NULL; }
    out->_mt = WasmBotsMessage_MessageType_InitialParameters;
    out->paramsVersion = WasmBotsMessage_InitialParameters_default.paramsVersion;
    out->engineVersionMajor = WasmBotsMessage_InitialParameters_default.engineVersionMajor;
    out->engineVersionMinor = WasmBotsMessage_InitialParameters_default.engineVersionMinor;
    out->engineVersionPatch = WasmBotsMessage_InitialParameters_default.engineVersionPatch;
    return out;
}

void WasmBotsMessage_InitialParameters_Destroy(WasmBotsMessage_InitialParameters *m) {
    WASMBOTSMESSAGE_FREE(m);
}

WasmBotsMessage_err_t WasmBotsMessage_InitialParameters_FromBytes(WasmBotsMessage_DataAccess* r, WasmBotsMessage_InitialParameters* dst) {
    dst->_mt = WasmBotsMessage_MessageType_InitialParameters;
    WasmBotsMessage_err_t err;
    err = WasmBotsMessage__ReadUInt16(r, &(dst->paramsVersion));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__ReadUInt16(r, &(dst->engineVersionMajor));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__ReadUInt16(r, &(dst->engineVersionMinor));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__ReadUInt16(r, &(dst->engineVersionPatch));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage_InitialParameters_WriteBytes(WasmBotsMessage_DataAccess* w, const WasmBotsMessage_InitialParameters* src, bool tag) {
    WasmBotsMessage_err_t err;
    if (tag) {
        err = WasmBotsMessage__WriteUInt8(w, (const uint8_t)(src->_mt));
        if (err != WASMBOTSMESSAGE_ERR_OK) {
            return err;
        }
    }
    err = WasmBotsMessage__WriteUInt16(w, (src->paramsVersion));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__WriteUInt16(w, (src->engineVersionMajor));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__WriteUInt16(w, (src->engineVersionMinor));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__WriteUInt16(w, (src->engineVersionPatch));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    return WASMBOTSMESSAGE_ERR_OK;
}

const WasmBotsMessage_PresentCircumstances WasmBotsMessage_PresentCircumstances_default = {
    ._mt = WasmBotsMessage_MessageType_PresentCircumstances,
    .lastTickDuration = 0,
    .lastMoveSucceeded = false,
    .lastMoveValid = false,
    .currentHitPoints = 0,
    .currentStatus = 0,
    .surroundings_len = 0,
    .surroundings = NULL,
    .surroundingsRadius = 0,
};

WasmBotsMessage_err_t WasmBotsMessage_PresentCircumstances_GetSizeInBytes(const WasmBotsMessage_PresentCircumstances* m, size_t* size) {
    *size = 0;
    *size += m->surroundings_len * 2;
    *size += 12;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_PresentCircumstances* WasmBotsMessage_PresentCircumstances_Create(void) {
    WasmBotsMessage_PresentCircumstances* out = (WasmBotsMessage_PresentCircumstances*)WASMBOTSMESSAGE_MALLOC(sizeof(WasmBotsMessage_PresentCircumstances));
    if (out == NULL) { return NULL; }
    out->_mt = WasmBotsMessage_MessageType_PresentCircumstances;
    out->lastTickDuration = WasmBotsMessage_PresentCircumstances_default.lastTickDuration;
    out->lastMoveSucceeded = WasmBotsMessage_PresentCircumstances_default.lastMoveSucceeded;
    out->lastMoveValid = WasmBotsMessage_PresentCircumstances_default.lastMoveValid;
    out->currentHitPoints = WasmBotsMessage_PresentCircumstances_default.currentHitPoints;
    out->currentStatus = WasmBotsMessage_PresentCircumstances_default.currentStatus;
    out->surroundings = WasmBotsMessage_PresentCircumstances_default.surroundings;
    out->surroundingsRadius = WasmBotsMessage_PresentCircumstances_default.surroundingsRadius;
    return out;
}

void WasmBotsMessage_PresentCircumstances_Destroy(WasmBotsMessage_PresentCircumstances *m) {
    WASMBOTSMESSAGE_FREE(m->surroundings);
    WASMBOTSMESSAGE_FREE(m);
}

WasmBotsMessage_err_t WasmBotsMessage_PresentCircumstances_FromBytes(WasmBotsMessage_DataAccess* r, WasmBotsMessage_PresentCircumstances* dst) {
    dst->_mt = WasmBotsMessage_MessageType_PresentCircumstances;
    WasmBotsMessage_err_t err;
    err = WasmBotsMessage__ReadUInt32(r, &(dst->lastTickDuration));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__ReadBool(r, &(dst->lastMoveSucceeded));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__ReadBool(r, &(dst->lastMoveValid));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__ReadUInt16(r, &(dst->currentHitPoints));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__ReadUInt8(r, &(dst->currentStatus));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__ReadUInt16(r, &(dst->surroundings_len));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    dst->surroundings = (uint16_t*)WASMBOTSMESSAGE_MALLOC(sizeof(uint16_t) * dst->surroundings_len);
    if (dst->surroundings == NULL) { return WASMBOTSMESSAGE_ERR_ALLOCATION_FAILURE; }
    for (uint16_t i1 = 0; i1 < dst->surroundings_len; i1++) {
        err = WasmBotsMessage__ReadUInt16(r, &(dst->surroundings[i1]));
        if (err != WASMBOTSMESSAGE_ERR_OK) {
            return err;
        }
    }
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__ReadUInt8(r, &(dst->surroundingsRadius));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage_PresentCircumstances_WriteBytes(WasmBotsMessage_DataAccess* w, const WasmBotsMessage_PresentCircumstances* src, bool tag) {
    WasmBotsMessage_err_t err;
    if (tag) {
        err = WasmBotsMessage__WriteUInt8(w, (const uint8_t)(src->_mt));
        if (err != WASMBOTSMESSAGE_ERR_OK) {
            return err;
        }
    }
    err = WasmBotsMessage__WriteUInt32(w, (src->lastTickDuration));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__WriteBool(w, (src->lastMoveSucceeded));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__WriteBool(w, (src->lastMoveValid));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__WriteUInt16(w, (src->currentHitPoints));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__WriteUInt8(w, (src->currentStatus));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__WriteUInt16(w, (src->surroundings_len));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    for (uint16_t i1 = 0; i1 < src->surroundings_len; i1++) {
        err = WasmBotsMessage__WriteUInt16(w, (src->surroundings[i1]));
        if (err != WASMBOTSMESSAGE_ERR_OK) {
            return err;
        }
    }
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__WriteUInt8(w, (src->surroundingsRadius));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    return WASMBOTSMESSAGE_ERR_OK;
}

const WasmBotsMessage_Wait WasmBotsMessage_Wait_default = {
    ._mt = WasmBotsMessage_MessageType_Wait,
};

WasmBotsMessage_err_t WasmBotsMessage_Wait_GetSizeInBytes(const WasmBotsMessage_Wait* m, size_t* size) {
    *size = 0;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_Wait* WasmBotsMessage_Wait_Create(void) {
    WasmBotsMessage_Wait* out = (WasmBotsMessage_Wait*)WASMBOTSMESSAGE_MALLOC(sizeof(WasmBotsMessage_Wait));
    if (out == NULL) { return NULL; }
    out->_mt = WasmBotsMessage_MessageType_Wait;
    return out;
}

void WasmBotsMessage_Wait_Destroy(WasmBotsMessage_Wait *m) {
    WASMBOTSMESSAGE_FREE(m);
}

WasmBotsMessage_err_t WasmBotsMessage_Wait_FromBytes(WasmBotsMessage_DataAccess* r, WasmBotsMessage_Wait* dst) {
    dst->_mt = WasmBotsMessage_MessageType_Wait;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage_Wait_WriteBytes(WasmBotsMessage_DataAccess* w, const WasmBotsMessage_Wait* src, bool tag) {
    WasmBotsMessage_err_t err;
    if (tag) {
        err = WasmBotsMessage__WriteUInt8(w, (const uint8_t)(src->_mt));
        if (err != WASMBOTSMESSAGE_ERR_OK) {
            return err;
        }
    }
    return WASMBOTSMESSAGE_ERR_OK;
}

const WasmBotsMessage_Resign WasmBotsMessage_Resign_default = {
    ._mt = WasmBotsMessage_MessageType_Resign,
};

WasmBotsMessage_err_t WasmBotsMessage_Resign_GetSizeInBytes(const WasmBotsMessage_Resign* m, size_t* size) {
    *size = 0;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_Resign* WasmBotsMessage_Resign_Create(void) {
    WasmBotsMessage_Resign* out = (WasmBotsMessage_Resign*)WASMBOTSMESSAGE_MALLOC(sizeof(WasmBotsMessage_Resign));
    if (out == NULL) { return NULL; }
    out->_mt = WasmBotsMessage_MessageType_Resign;
    return out;
}

void WasmBotsMessage_Resign_Destroy(WasmBotsMessage_Resign *m) {
    WASMBOTSMESSAGE_FREE(m);
}

WasmBotsMessage_err_t WasmBotsMessage_Resign_FromBytes(WasmBotsMessage_DataAccess* r, WasmBotsMessage_Resign* dst) {
    dst->_mt = WasmBotsMessage_MessageType_Resign;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage_Resign_WriteBytes(WasmBotsMessage_DataAccess* w, const WasmBotsMessage_Resign* src, bool tag) {
    WasmBotsMessage_err_t err;
    if (tag) {
        err = WasmBotsMessage__WriteUInt8(w, (const uint8_t)(src->_mt));
        if (err != WASMBOTSMESSAGE_ERR_OK) {
            return err;
        }
    }
    return WASMBOTSMESSAGE_ERR_OK;
}

const WasmBotsMessage_MoveTo WasmBotsMessage_MoveTo_default = {
    ._mt = WasmBotsMessage_MessageType_MoveTo,
    .direction = 0,
    .distance = 0,
};

WasmBotsMessage_err_t WasmBotsMessage_MoveTo_GetSizeInBytes(const WasmBotsMessage_MoveTo* m, size_t* size) {
    *size = 2;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_MoveTo* WasmBotsMessage_MoveTo_Create(void) {
    WasmBotsMessage_MoveTo* out = (WasmBotsMessage_MoveTo*)WASMBOTSMESSAGE_MALLOC(sizeof(WasmBotsMessage_MoveTo));
    if (out == NULL) { return NULL; }
    out->_mt = WasmBotsMessage_MessageType_MoveTo;
    out->direction = WasmBotsMessage_MoveTo_default.direction;
    out->distance = WasmBotsMessage_MoveTo_default.distance;
    return out;
}

void WasmBotsMessage_MoveTo_Destroy(WasmBotsMessage_MoveTo *m) {
    WASMBOTSMESSAGE_FREE(m);
}

WasmBotsMessage_err_t WasmBotsMessage_MoveTo_FromBytes(WasmBotsMessage_DataAccess* r, WasmBotsMessage_MoveTo* dst) {
    dst->_mt = WasmBotsMessage_MessageType_MoveTo;
    WasmBotsMessage_err_t err;
    err = WasmBotsMessage__ReadUInt8(r, &(dst->direction));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__ReadUInt8(r, &(dst->distance));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage_MoveTo_WriteBytes(WasmBotsMessage_DataAccess* w, const WasmBotsMessage_MoveTo* src, bool tag) {
    WasmBotsMessage_err_t err;
    if (tag) {
        err = WasmBotsMessage__WriteUInt8(w, (const uint8_t)(src->_mt));
        if (err != WASMBOTSMESSAGE_ERR_OK) {
            return err;
        }
    }
    err = WasmBotsMessage__WriteUInt8(w, (src->direction));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__WriteUInt8(w, (src->distance));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    return WASMBOTSMESSAGE_ERR_OK;
}

const WasmBotsMessage_Open WasmBotsMessage_Open_default = {
    ._mt = WasmBotsMessage_MessageType_Open,
    .targetX = 0,
    .targetY = 0,
};

WasmBotsMessage_err_t WasmBotsMessage_Open_GetSizeInBytes(const WasmBotsMessage_Open* m, size_t* size) {
    *size = 4;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_Open* WasmBotsMessage_Open_Create(void) {
    WasmBotsMessage_Open* out = (WasmBotsMessage_Open*)WASMBOTSMESSAGE_MALLOC(sizeof(WasmBotsMessage_Open));
    if (out == NULL) { return NULL; }
    out->_mt = WasmBotsMessage_MessageType_Open;
    out->targetX = WasmBotsMessage_Open_default.targetX;
    out->targetY = WasmBotsMessage_Open_default.targetY;
    return out;
}

void WasmBotsMessage_Open_Destroy(WasmBotsMessage_Open *m) {
    WASMBOTSMESSAGE_FREE(m);
}

WasmBotsMessage_err_t WasmBotsMessage_Open_FromBytes(WasmBotsMessage_DataAccess* r, WasmBotsMessage_Open* dst) {
    dst->_mt = WasmBotsMessage_MessageType_Open;
    WasmBotsMessage_err_t err;
    err = WasmBotsMessage__ReadInt16(r, &(dst->targetX));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__ReadInt16(r, &(dst->targetY));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage_Open_WriteBytes(WasmBotsMessage_DataAccess* w, const WasmBotsMessage_Open* src, bool tag) {
    WasmBotsMessage_err_t err;
    if (tag) {
        err = WasmBotsMessage__WriteUInt8(w, (const uint8_t)(src->_mt));
        if (err != WASMBOTSMESSAGE_ERR_OK) {
            return err;
        }
    }
    err = WasmBotsMessage__WriteInt16(w, (src->targetX));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__WriteInt16(w, (src->targetY));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    return WASMBOTSMESSAGE_ERR_OK;
}

const WasmBotsMessage_Close WasmBotsMessage_Close_default = {
    ._mt = WasmBotsMessage_MessageType_Close,
    .targetX = 0,
    .targetY = 0,
};

WasmBotsMessage_err_t WasmBotsMessage_Close_GetSizeInBytes(const WasmBotsMessage_Close* m, size_t* size) {
    *size = 4;
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_Close* WasmBotsMessage_Close_Create(void) {
    WasmBotsMessage_Close* out = (WasmBotsMessage_Close*)WASMBOTSMESSAGE_MALLOC(sizeof(WasmBotsMessage_Close));
    if (out == NULL) { return NULL; }
    out->_mt = WasmBotsMessage_MessageType_Close;
    out->targetX = WasmBotsMessage_Close_default.targetX;
    out->targetY = WasmBotsMessage_Close_default.targetY;
    return out;
}

void WasmBotsMessage_Close_Destroy(WasmBotsMessage_Close *m) {
    WASMBOTSMESSAGE_FREE(m);
}

WasmBotsMessage_err_t WasmBotsMessage_Close_FromBytes(WasmBotsMessage_DataAccess* r, WasmBotsMessage_Close* dst) {
    dst->_mt = WasmBotsMessage_MessageType_Close;
    WasmBotsMessage_err_t err;
    err = WasmBotsMessage__ReadInt16(r, &(dst->targetX));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__ReadInt16(r, &(dst->targetY));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    return WASMBOTSMESSAGE_ERR_OK;
}

WasmBotsMessage_err_t WasmBotsMessage_Close_WriteBytes(WasmBotsMessage_DataAccess* w, const WasmBotsMessage_Close* src, bool tag) {
    WasmBotsMessage_err_t err;
    if (tag) {
        err = WasmBotsMessage__WriteUInt8(w, (const uint8_t)(src->_mt));
        if (err != WASMBOTSMESSAGE_ERR_OK) {
            return err;
        }
    }
    err = WasmBotsMessage__WriteInt16(w, (src->targetX));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    err = WasmBotsMessage__WriteInt16(w, (src->targetY));
    if (err != WASMBOTSMESSAGE_ERR_OK) {
        return err;
    }
    return WASMBOTSMESSAGE_ERR_OK;
}


// end of struct/message definitions
///////////////////////////////////////


//
//   END OF IMPLEMENTATION
//
//////////////////////////////////////////////////////////////////////////////

#endif // WASMBOTSMESSAGE_IMPLEMENTATION

#ifdef __cplusplus
}
#endif

#endif // INCLUDE_WASMBOTSMESSAGE_H
